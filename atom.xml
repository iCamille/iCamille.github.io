<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>camille&#39;s Blog</title>
  <subtitle>爱生活 爱前端</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://icamille.github.io/"/>
  <updated>2016-07-29T14:35:06.000Z</updated>
  <id>http://icamille.github.io/</id>
  
  <author>
    <name>camille</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《如何阅读一本书》阅读笔记</title>
    <link href="http://icamille.github.io/2016/07/29/readbook/"/>
    <id>http://icamille.github.io/2016/07/29/readbook/</id>
    <published>2016-07-29T14:29:38.000Z</published>
    <updated>2016-07-29T14:35:06.000Z</updated>
    
    <content type="html">&lt;p&gt;最近参与熊猫书院《十个月提升自己》第三期的读书活动，每周阅读一本图书。7月开始，今天是第四周的最后一天，第四本书也已阅读完成。本文主要是想通过思维导图的方式和大家分享[美] 莫提默·J. 艾德勒 / 查尔斯·范多伦 的《如何阅读一本书》一书。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下面分享给大家：&lt;br&gt; &lt;img src=&quot;../../../../css/images/howtoreadbook-2016160729.png&quot; alt=&quot;《如何阅读一本书》阅读笔记 -- 思维导图&quot;&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;../../../../css/images/howtoreadabook.png&quot; alt=&quot;《如何阅读一本书》阅读笔记 -- 思维导图&quot;&gt;&lt;/p&gt;
&lt;p&gt;每天成长一点，遇见更好的自己！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近参与熊猫书院《十个月提升自己》第三期的读书活动，每周阅读一本图书。7月开始，今天是第四周的最后一天，第四本书也已阅读完成。本文主要是想通过思维导图的方式和大家分享[美] 莫提默·J. 艾德勒 / 查尔斯·范多伦 的《如何阅读一本书》一书。
    
    </summary>
    
      <category term="读书笔记" scheme="http://icamille.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="如何阅读一本书" scheme="http://icamille.github.io/tags/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://icamille.github.io/2016/07/29/seajs-1/"/>
    <id>http://icamille.github.io/2016/07/29/seajs-1/</id>
    <published>2016-07-28T22:47:58.740Z</published>
    <updated>2016-07-28T23:01:06.000Z</updated>
    
    <content type="html">&lt;p&gt;简单易用Seajs  &lt;/p&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;一个网站必然会涉及很多功能，tab选项卡、slide轮播图、pop弹出层、美化alert、paging分页等等等等，如果是企业网站那整合成一个js文件就够了，即 插件库 。 &lt;/p&gt;
&lt;p&gt;但是对于一个大的网站平台来说需要的功能可能会有很多，而且随着平台的发展，功能会越来越多。到最后会发展成怎样的情况呢？&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;../../../../css/images/seajs-example.png&quot; alt=&quot;&quot;&gt;  &lt;/p&gt;
&lt;p&gt;这是 &lt;em&gt;&lt;a href=&quot;https://www.qian360.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;钱庄网&lt;/a&gt;&lt;/em&gt; 原先的插件库，已经接近20个插件了。想象一下，你在做一个简单的活动单页里面用到了tab选项卡，于是你把插件库引用了进来，这个时候你有想过你只是需要一个功能但是却把整个插件库引进来了，多大的浪费啊。该怎么解决这种问题呢? &lt;/p&gt;
&lt;p&gt;我们希望一个页面按需引入，这个页面需要什么功能就引入什么功能。现在主流的工具有两种，amd规范的RequireJS、cmd规范的Seajs。  &lt;/p&gt;
&lt;p&gt;什么是Seajs&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Seajs是一个加载器 &lt;a href=&quot;http://kb.cnblogs.com/page/211942/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://kb.cnblogs.com/page/211942/&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;遵循 CMD 规范模块化开发，依赖的自动加载、配置的简洁清晰。   &lt;/li&gt;
&lt;li&gt;兼容性&lt;br&gt;• Chrome 3+&lt;br&gt;• Firefox 2+&lt;br&gt;• Safari 3.2+&lt;br&gt;• Opera 10+&lt;br&gt;•IE 5.5+&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;基本应用&quot;&gt;&lt;a href=&quot;#基本应用&quot; class=&quot;headerlink&quot; title=&quot;基本应用&quot;&gt;&lt;/a&gt;基本应用&lt;/h2&gt;&lt;h3 id=&quot;导入Seajs库&quot;&gt;&lt;a href=&quot;#导入Seajs库&quot; class=&quot;headerlink&quot; title=&quot;导入Seajs库&quot;&gt;&lt;/a&gt;导入Seajs库&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;去官网下载最新的seajs文件， &lt;a href=&quot;http://seajs.org/docs/#downloads&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://seajs.org/docs/#downloads&lt;/a&gt;   &lt;/li&gt;
&lt;li&gt;&lt;p&gt;在页尾引入seajs：   &lt;/p&gt;
&lt;script src=&quot;/site/script/sea.js&quot;&gt;&lt;/script&gt;  
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;然后在它下面写模块的配置和入口。      &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// seajs 的简单配置  
seajs.config({  
  base: &amp;quot;../sea-modules/&amp;quot;,  
  alias: {  
    &amp;quot;jquery&amp;quot;: &amp;quot;jquery/jquery/1.10.1/jquery.js&amp;quot;  
  }  
});    

// 加载入口模块  
seajs.use(&amp;quot;../static/hello/src/main&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;配置和入口&quot;&gt;&lt;a href=&quot;#配置和入口&quot; class=&quot;headerlink&quot; title=&quot;配置和入口&quot;&gt;&lt;/a&gt;配置和入口&lt;/h2&gt;&lt;p&gt;这里解释下配置和入口的意思。&lt;/p&gt;
&lt;h3 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h3&gt;&lt;p&gt;通常在配置上修改seajs的路径和别名。&lt;/p&gt;
&lt;p&gt;seajs的 &lt;strong&gt;路径是相对于前面引入的seajs文件的&lt;/strong&gt; 。假如是这样的目录结构：  &lt;/p&gt;
&lt;p&gt;我们平时如果我们在index.html上引用main.js路径应该是这样写的 script/main.js ，从news.html引用main.js就要这样写， ../script/main.js 。 &lt;/p&gt;
&lt;p&gt;而在seajs是相对于seajs文件的，一律直接使用 main.js 就OK了，是不是很方便呢？ &lt;/p&gt;
&lt;p&gt;既然这么方便那在什么情况需要配置呢？一般情况是用不到的。但是假如你的路径特别深 或者要做路径映射的时候它的作用就来了。下面介绍下常用的几个配置。&lt;br&gt;seajs.config({&lt;br&gt;  // Sea.js 的基础路径（修改这个就不是路径就不是相对于seajs文件了）&lt;br&gt;  base: ‘&lt;a href=&quot;http://example.com/path/to/base/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://example.com/path/to/base/&lt;/a&gt;‘,&lt;br&gt;  // 别名配置（用变量表示文件，解决路径层级过深和实现路径映射）&lt;br&gt;  alias: {&lt;br&gt;    ‘es5-safe’: ‘gallery/es5-safe/0.9.3/es5-safe’,&lt;br&gt;    ‘json’: ‘gallery/json/1.0.2/json’,&lt;br&gt;    ‘jquery’: ‘jquery/jquery/1.10.1/jquery’&lt;br&gt;  },&lt;br&gt;  // 路径配置（用变量表示路径，解决路径层级过深的问题）&lt;br&gt;  paths: {&lt;br&gt;    ‘gallery’: ‘&lt;a href=&quot;https://a.alipayobjects.com/gallery&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://a.alipayobjects.com/gallery&lt;/a&gt;‘&lt;br&gt;  }&lt;br&gt;});&lt;/p&gt;
&lt;p&gt;查看更多 &lt;/p&gt;
&lt;p&gt;入口&lt;/p&gt;
&lt;p&gt;入口即加载，需要加载什么文件（模块加载器）就在这里引入。 sea.js 在下载完成后，会自动加载入口模块。&lt;br&gt;seajs.use(“abc/main”);  //导入seajs.js同级的abc文件夹下的main.js模块的（后缀名可略去不写）&lt;/p&gt;
&lt;p&gt;seajs.use()还有另外一种用法。 &lt;/p&gt;
&lt;p&gt;有时候我们写一个简单的单页并不想为它单独写一个js文件，选择在直接把js代码写在页面上，seajs通过 seajs.use() 实现了这个。 接收两个参数第一个是文件依赖(单个用字符串数组都可以，多个需用数组表示)，第二个是回调函数。 &lt;/p&gt;
&lt;p&gt;加载单个依赖&lt;br&gt;//加载模块 main，并在加载完成时，执行指定回调&lt;br&gt;seajs.use(‘./main’, function(main) {&lt;br&gt;  main.init();&lt;br&gt;});&lt;/p&gt;
&lt;p&gt;加载多个依赖&lt;br&gt;//并发加载模块 a 和模块 b，并在都加载完成时，执行指定回调&lt;br&gt;seajs.use([‘./a’, ‘./b’], function(a, b) {&lt;br&gt;  a.init();&lt;br&gt;  b.init();&lt;br&gt;});&lt;/p&gt;
&lt;p&gt;这里回掉函数中的a和b参数是与前面的模块暴露出来的接口一一对应的。有时候也许只需要使用b的接口，但是也要把a参数写上。什么是暴露接口下面会解释。&lt;/p&gt;
&lt;p&gt;模块开发&lt;/p&gt;
&lt;p&gt;这里才是重点，其实也很简单就是一个书写规范（CMD）而已。&lt;br&gt;// 所有模块都通过 define 来定义&lt;br&gt;define(function(require, exports, module) {&lt;/p&gt;
&lt;p&gt;  // 通过 require 引入依赖&lt;br&gt;  var $ = require(‘jquery’);&lt;br&gt;  var Spinning = require(‘./spinning’);&lt;/p&gt;
&lt;p&gt;  // 通过 exports 对外提供接口&lt;br&gt;  exports.doSomething = …&lt;/p&gt;
&lt;p&gt;  // 或者通过 module.exports 提供整个接口&lt;br&gt;  module.exports = …&lt;/p&gt;
&lt;p&gt;});&lt;/p&gt;
&lt;p&gt;模块是通过define()方法包装的，然后内部痛过require()方法引入需要的依赖文件(模块)。（也可以引入.css文件哦~）&lt;/p&gt;
&lt;p&gt;模块最好是面向对象开发的，这样最后可以方便的通过 exports.doSomething 或 module.exports 把模块的接口给暴露出来。如果你是写的是jq插件的话就不需要这个功能了，因为你的接口是写在jquery的对象里的。如果你不需要提供接口的话也可以不使用这两个属性哦！ &lt;/p&gt;
&lt;p&gt;事实上define方法还有另外几个参数，一般情况我们用不到。具体看 官方API 。 &lt;/p&gt;
&lt;p&gt;小结&lt;/p&gt;
&lt;p&gt;其实Seajs的基本使用就这么简单，日常使用足够了，之前看官网的 5分钟教程 楞是没看懂，后来想想真的是5分钟学会啊,悟性太低- -|| &lt;/p&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;模块内的函数依赖必须交代清楚，防止模块在函数依赖加载前先加载出来。而且还增强了模块的独立性。 &lt;/li&gt;
&lt;li&gt;引入seajs的时候最好给 &lt;script&gt; 标签加个id，可以快速访问到这个标签（我是在模块合并时用到它的） &lt;/li&gt;
&lt;li&gt;还有前面提到的使用 seajs.use() 在.html页面上写js时如果有多个模块依赖，需要使用暴露出来的接口就要让参数与它一一对应。 &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;###&lt;br&gt;&lt;a href=&quot;http://www.tuicool.com/articles/3uIZzy&quot;&gt;http://www.tuicool.com/articles/3uIZzy&lt;/a&gt;&lt;/p&gt;
&lt;/script&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;简单易用Seajs  &lt;/p&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;一个网站必然会涉及很多功能，tab选项卡、slide轮播图、pop弹出层、美化alert、paging
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>toFixed引发的思考</title>
    <link href="http://icamille.github.io/2016/07/27/about-tofixed/"/>
    <id>http://icamille.github.io/2016/07/27/about-tofixed/</id>
    <published>2016-07-26T23:02:38.000Z</published>
    <updated>2016-07-27T16:12:36.000Z</updated>
    
    <content type="html">&lt;p&gt;在对文件上传进度进行格式化处理时，涉及到精度的四舍五入问题，例如保留两位小数。这在JS中可以通过调用toFixed传入精度实现。但问题来了，先乘100再舍入，还是先舍入再乘100？&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;先看结果：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var a = Math.random();  
console.log(a);  
console.log(a.toFixed(4));  
console.log(a.toFixed(4) * 100);  
console.log((a * 100).toFixed(2));
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;输出1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0.8988301526666329  
0.8988  
89.88000000000001
89.88
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;输出2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0.413465264585297  
0.4135  
41.349999999999994  
41.35
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;输出3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0.1348901139915517
0.1349
13.489999999999998
13.49
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;输出4：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0.2731272622047103  
0.2731  
27.310000000000002  
27.31  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  可以看出，两种调用顺序的执行结果并不一致，前者甚至没有达到预期的保留2位小数。该如何解释并解决呢？ &lt;/p&gt;
&lt;p&gt;  回到JS对浮点数的处理，JS仅有Number数值类型，而Number采用的是IEEE-754 64位双精度浮点数编码。其具有以下特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;浮点数可表示的值范围比同等位数的整数表示方式的值范围要大得多；&lt;/li&gt;
&lt;li&gt;浮点数无法精确表示其值范围内的所有数值，而有符号和无符号整数则是精确表示其值范围内的每个数值；&lt;/li&gt;
&lt;li&gt;浮点数只能精确表示m*2e的数值；&lt;/li&gt;
&lt;li&gt;当biased-exponent为2e-1-1时，浮点数能精确表示该范围内的各整数值；&lt;/li&gt;
&lt;li&gt;当biased-exponent不为2e-1-1时，浮点数不能精确表示该范围内的各整数值。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由此可知，部分数值并不能精确表示，最终在运算结果中导致了偏差。&lt;/p&gt;
&lt;p&gt;对以上问题的分析，详见：&lt;a href=&quot;https://segmentfault.com/a/1190000005022170&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Why 0.1 + 0.2 === 0.30000000000000004?&lt;/a&gt;。其中也给出了几个解决的方案，可以作为问题的补充。&lt;/p&gt;
&lt;p&gt;而对于本问题的解决，将toFixed调用放至最后即可。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;调用顺序很重要！&lt;/li&gt;
&lt;li&gt;异常测试很重要，尤其对于条件特殊值的非边界情况（如特定的随机数）。     &lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;本文（当然）是从&lt;a href=&quot;http://www.ifuyun.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;抚云生活&lt;/a&gt;偷来的，你们可以去告状了： &lt;/strong&gt;&lt;br&gt; &lt;img src=&quot;../../../../css/images/to-fixed.jpg&quot; alt=&quot;I,Fuyun&quot;&gt;  &lt;/p&gt;
&lt;p&gt; 网址：&lt;a href=&quot;http://www.ifuyun.com/post/20ce98be3cbcd989&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;toFixed引发的思考&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在对文件上传进度进行格式化处理时，涉及到精度的四舍五入问题，例如保留两位小数。这在JS中可以通过调用toFixed传入精度实现。但问题来了，先乘100再舍入，还是先舍入再乘100？
    
    </summary>
    
      <category term="技术" scheme="http://icamille.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="JavaScript" scheme="http://icamille.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>《精进》阅读笔记</title>
    <link href="http://icamille.github.io/2016/07/22/jingjin/"/>
    <id>http://icamille.github.io/2016/07/22/jingjin/</id>
    <published>2016-07-22T04:22:38.000Z</published>
    <updated>2016-07-22T03:22:06.000Z</updated>
    
    <content type="html">&lt;p&gt;最近参与熊猫书院《十个月提升自己》第三期的读书活动，每周阅读一本图书。7月开始，今天恰好是第三周的最后一天，第三本书已阅读完成。本文主要是想通过思维导图的方式和大家分享知乎大神采铜的《精进：如何成为一个很厉害的人》一书。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下面分享给大家：&lt;br&gt; &lt;img src=&quot;../../../../css/images/jingjin-2016160722.jpg&quot; alt=&quot;《精进》阅读笔记 -- 思维导图&quot;&gt;&lt;/p&gt;
&lt;p&gt;每天成长一点，遇见更好的自己！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近参与熊猫书院《十个月提升自己》第三期的读书活动，每周阅读一本图书。7月开始，今天恰好是第三周的最后一天，第三本书已阅读完成。本文主要是想通过思维导图的方式和大家分享知乎大神采铜的《精进：如何成为一个很厉害的人》一书。
    
    </summary>
    
      <category term="读书笔记" scheme="http://icamille.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="提升自我" scheme="http://icamille.github.io/tags/%E6%8F%90%E5%8D%87%E8%87%AA%E6%88%91/"/>
    
  </entry>
  
  <entry>
    <title>《拖延心理学》阅读笔记</title>
    <link href="http://icamille.github.io/2016/07/15/tyxlx/"/>
    <id>http://icamille.github.io/2016/07/15/tyxlx/</id>
    <published>2016-07-15T02:02:38.000Z</published>
    <updated>2016-07-18T23:07:54.000Z</updated>
    
    <content type="html">&lt;p&gt;最近参与熊猫书院《十个月提升自己》第三期的读书活动，每周阅读一本图书。7月开始，今天恰好是第二周的最后一天，第二本书已阅读完成。本文主要是想通过思维导图的方式和大家分享简·博克、莱诺拉·袁的《拖延心理学》一书。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下面分享给大家：&lt;br&gt; &lt;img src=&quot;../../../../css/images/tyxlx-2016160715.jpg&quot; alt=&quot;《拖延心理学》阅读笔记 -- 思维导图&quot;&gt;&lt;/p&gt;
&lt;p&gt;每天成长一点，遇见更好的自己！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近参与熊猫书院《十个月提升自己》第三期的读书活动，每周阅读一本图书。7月开始，今天恰好是第二周的最后一天，第二本书已阅读完成。本文主要是想通过思维导图的方式和大家分享简·博克、莱诺拉·袁的《拖延心理学》一书。
    
    </summary>
    
      <category term="读书笔记" scheme="http://icamille.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="拖延心理学" scheme="http://icamille.github.io/tags/%E6%8B%96%E5%BB%B6%E5%BF%83%E7%90%86%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>《自控力》阅读笔记</title>
    <link href="http://icamille.github.io/2016/07/08/zikongli/"/>
    <id>http://icamille.github.io/2016/07/08/zikongli/</id>
    <published>2016-07-08T02:02:38.000Z</published>
    <updated>2016-07-10T13:56:00.000Z</updated>
    
    <content type="html">&lt;p&gt;最近参与熊猫书院《十个月提升自己》第三期的读书活动，每周阅读一本图书。7月开始，今天恰好是第一周的最后一天，第一本书也已阅读完成。本文主要是想通过思维导图的方式和大家分享美国著名健康心理学家凯利·麦格尼格尔博士的《自控力》一书。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下面分享给大家：&lt;br&gt; &lt;img src=&quot;../../../../css/images/zikongli-2016160708.jpg&quot; alt=&quot;《自控力》阅读笔记 -- 思维导图&quot;&gt;&lt;/p&gt;
&lt;p&gt;每天成长一点，遇见更好的自己！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近参与熊猫书院《十个月提升自己》第三期的读书活动，每周阅读一本图书。7月开始，今天恰好是第一周的最后一天，第一本书也已阅读完成。本文主要是想通过思维导图的方式和大家分享美国著名健康心理学家凯利·麦格尼格尔博士的《自控力》一书。
    
    </summary>
    
      <category term="读书笔记" scheme="http://icamille.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="自控力" scheme="http://icamille.github.io/tags/%E8%87%AA%E6%8E%A7%E5%8A%9B/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 学习资源</title>
    <link href="http://icamille.github.io/2016/07/01/markdown-url/"/>
    <id>http://icamille.github.io/2016/07/01/markdown-url/</id>
    <published>2016-07-01T03:07:38.000Z</published>
    <updated>2016-07-10T13:56:00.000Z</updated>
    
    <content type="html">&lt;p&gt;在搭建&lt;a href=&quot;http://icamille.github.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;个人网站&lt;/a&gt;过程中，第一次接触到&lt;a href=&quot;http://baike.baidu.com/link?url=DnJkoGHc2tc3-TaQAthv-zFbrYi9YkL9pw1313M2z7-Ro7Mhx9gO6rjnZAzrF9LdXP0kcAMI0CtmYwYUZq0SDa&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Markdowm&lt;/a&gt;，需要学习Markdown的相关语法，下面是一些学习资源的相关链接。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt; &lt;/p&gt;
&lt;h2 id=&quot;Markdown学习资源&quot;&gt;&lt;a href=&quot;#Markdown学习资源&quot; class=&quot;headerlink&quot; title=&quot;Markdown学习资源&quot;&gt;&lt;/a&gt;Markdown学习资源&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/1e402922ee32/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Markdown——入门指南&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://sspai.com/25137&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;认识与入门Markdown&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.ituring.com.cn/article/23&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;怎样使用Markdown&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://wowubuntu.com/markdown/#list&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Markdown 语法说明 (简体中文版) &lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有时间会写篇博客来详细总结下Markdown的相关内容。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在搭建&lt;a href=&quot;http://icamille.github.com&quot;&gt;个人网站&lt;/a&gt;过程中，第一次接触到&lt;a href=&quot;http://baike.baidu.com/link?url=DnJkoGHc2tc3-TaQAthv-zFbrYi9YkL9pw1313M2z7-Ro7Mhx9gO6rjnZAzrF9LdXP0kcAMI0CtmYwYUZq0SDa&quot;&gt;Markdowm&lt;/a&gt;，需要学习Markdown的相关语法，下面是一些学习资源的相关链接。
    
    </summary>
    
      <category term="技术" scheme="http://icamille.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Markdown" scheme="http://icamille.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Web前端设计原则</title>
    <link href="http://icamille.github.io/2016/07/01/design-principles-of-web-front/"/>
    <id>http://icamille.github.io/2016/07/01/design-principles-of-web-front/</id>
    <published>2016-07-01T02:02:38.000Z</published>
    <updated>2016-07-27T01:43:02.000Z</updated>
    
    <content type="html">&lt;p&gt;最近看了@余果 的《Web全栈工程师的自我修养》颇有一些收获，刚好最近在制定经验前端的规范化工作，制定了几条前端设计原则，分享给大家。&lt;/p&gt;
&lt;p&gt;下面就是经验的前端指导原则：&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设计原则是指导性原则，比较抽象，可扩展&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;KISS原则&lt;/li&gt;
&lt;li&gt;DRY原则   &lt;/li&gt;
&lt;li&gt;最少知道原则 &lt;/li&gt;
&lt;li&gt;分治原则&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;KISS原则（Keep-it-Simple-and-Stupid）&quot;&gt;&lt;a href=&quot;#KISS原则（Keep-it-Simple-and-Stupid）&quot; class=&quot;headerlink&quot; title=&quot;KISS原则（Keep it Simple and Stupid）&quot;&gt;&lt;/a&gt;KISS原则（Keep it Simple and Stupid）&lt;/h2&gt;&lt;p&gt;一切尽可能简单！ 简单就是美，能简单的绝不复杂。&lt;/p&gt;
&lt;h2 id=&quot;DRY原则（Don’t-Repeat-Yourself）&quot;&gt;&lt;a href=&quot;#DRY原则（Don’t-Repeat-Yourself）&quot; class=&quot;headerlink&quot; title=&quot;DRY原则（Don’t Repeat Yourself）&quot;&gt;&lt;/a&gt;DRY原则（Don’t Repeat Yourself）&lt;/h2&gt;&lt;p&gt;顾名思义，任何一段代码如果需要复制第三次，需要进行抽象。&lt;/p&gt;
&lt;h2 id=&quot;最少知道原则。&quot;&gt;&lt;a href=&quot;#最少知道原则。&quot; class=&quot;headerlink&quot; title=&quot;最少知道原则。&quot;&gt;&lt;/a&gt;最少知道原则。&lt;/h2&gt;&lt;p&gt;高内聚，低耦合，任何事物应该保持对外界的最少知道原则。&lt;/p&gt;
&lt;h2 id=&quot;分治原则&quot;&gt;&lt;a href=&quot;#分治原则&quot; class=&quot;headerlink&quot; title=&quot;分治原则&quot;&gt;&lt;/a&gt;分治原则&lt;/h2&gt;&lt;p&gt;复杂的问题，负责的功能，应该拆分，由更小的部分组成。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;原文网址：&lt;a href=&quot;http://yanhaijing.com/web/2016/06/17/design-principles-of-web-front/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://yanhaijing.com/web/2016/06/17/design-principles-of-web-front/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近看了@余果 的《Web全栈工程师的自我修养》颇有一些收获，刚好最近在制定经验前端的规范化工作，制定了几条前端设计原则，分享给大家。&lt;/p&gt;
&lt;p&gt;下面就是经验的前端指导原则：
    
    </summary>
    
      <category term="技术" scheme="http://icamille.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="设计原则" scheme="http://icamille.github.io/tags/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://icamille.github.io/2016/06/23/hello-world/"/>
    <id>http://icamille.github.io/2016/06/23/hello-world/</id>
    <published>2016-06-23T02:02:38.000Z</published>
    <updated>2016-07-10T13:56:00.000Z</updated>
    
    <content type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://icamille.github.io/&quot;&gt;Camille Blog&lt;/a&gt;! This is my very first post.&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;h2 id=&quot;Hello-Everyone&quot;&gt;&lt;a href=&quot;#Hello-Everyone&quot; class=&quot;headerlink&quot; title=&quot;Hello Everyone&quot;&gt;&lt;/a&gt;Hello Everyone&lt;/h2&gt;&lt;p&gt;欢迎大家来到我的博客，以后会和大家分享工作和生活方面的收获。作为自己一步一步搭起来的博客的第一篇文章，谨以此文记录下自己的“劳动成果”。&lt;!--more--&gt;  嘿嘿……&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../../../../css/images/read.jpg&quot; alt=&quot;Camille Blog&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://icamille.github.io/&quot;&gt;Camille Blog&lt;/a&gt;! This is my very first post.
    
    </summary>
    
      <category term="博客" scheme="http://icamille.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="BLog" scheme="http://icamille.github.io/tags/BLog/"/>
    
  </entry>
  
</feed>
