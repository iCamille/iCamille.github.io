<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>I,Camille</title>
  <subtitle>爱生活 爱前端</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://icamille.github.io/"/>
  <updated>2016-08-12T01:27:02.000Z</updated>
  <id>http://icamille.github.io/</id>
  
  <author>
    <name>camille</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>react学习资料相关</title>
    <link href="http://icamille.github.io/2016/08/12/about-react/"/>
    <id>http://icamille.github.io/2016/08/12/about-react/</id>
    <published>2016-08-11T16:00:00.000Z</published>
    <updated>2016-08-12T01:27:02.000Z</updated>
    
    <content type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://facebook.github.io/react/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;[http://reactjs.cn&quot;&gt;中文文档地址&lt;/a&gt; &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/reactjs-cn/react-docs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub地址&lt;/a&gt;    &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2015/03/react.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React 入门实例教程–阮一峰&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.infoq.com/cn/articles/subversion-front-end-ui-development-framework-react&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;颠覆式前端UI开发框架：React&lt;/a&gt;     &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wiki.jikexueyuan.com/project/react/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;极客学院整理的文档&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;官网&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;[http://reactjs.cn&quot;&gt;中文文档地址&lt;/a&gt;
    
    </summary>
    
      <category term="技术" scheme="http://icamille.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="react" scheme="http://icamille.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>聊聊Web App、Hybrid App与Native App的设计差异</title>
    <link href="http://icamille.github.io/2016/08/10/webapp-vs-nativeapp/"/>
    <id>http://icamille.github.io/2016/08/10/webapp-vs-nativeapp/</id>
    <published>2016-08-10T03:02:38.000Z</published>
    <updated>2016-08-10T08:10:16.000Z</updated>
    
    <content type="html">&lt;p&gt; 目前主流应用程序大体分为三类：Web App、Hybrid App、 Native App。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;    &lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;../../../../css/images/app-0810/1.png&quot; alt=&quot;Web App、Hybrid App、 Native App&quot;&gt;    &lt;/p&gt;
&lt;h2 id=&quot;一、Web-App、Hybrid-App、Native-App-纵向对比&quot;&gt;&lt;a href=&quot;#一、Web-App、Hybrid-App、Native-App-纵向对比&quot; class=&quot;headerlink&quot; title=&quot;一、Web App、Hybrid App、Native App 纵向对比&quot;&gt;&lt;/a&gt;一、Web App、Hybrid App、Native App 纵向对比&lt;/h2&gt;&lt;p&gt;首先，我们来看看什么是 Web App、Hybrid App、 Native App。&lt;/p&gt;
&lt;h3 id=&quot;1-Web-APP&quot;&gt;&lt;a href=&quot;#1-Web-APP&quot; class=&quot;headerlink&quot; title=&quot;1. Web APP&quot;&gt;&lt;/a&gt;1. Web APP&lt;/h3&gt;&lt;p&gt;Web App 指采用Html5语言写出的App，不需要下载安装。类似于现在所说的轻应用。生存在浏览器中的应用，基本上可以说是触屏版的网页应用。&lt;/p&gt;
&lt;p&gt;优点&lt;/p&gt;
&lt;p&gt;（1）开发成本低，  &lt;/p&gt;
&lt;p&gt;（2）更新快，&lt;/p&gt;
&lt;p&gt;（3）更新无需通知用户，不需要手动升级&lt;/p&gt;
&lt;p&gt;（4）能够跨多个平台和终端。&lt;/p&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;p&gt;（1）临时性的入口&lt;/p&gt;
&lt;p&gt;（2）无法获取系统级别的通知，提醒，动效等等&lt;/p&gt;
&lt;p&gt;（3）用户留存率低&lt;/p&gt;
&lt;p&gt;（4）设计受限制诸多&lt;/p&gt;
&lt;p&gt;（5）体验较差&lt;/p&gt;
&lt;h3 id=&quot;2-Hybrid-App&quot;&gt;&lt;a href=&quot;#2-Hybrid-App&quot; class=&quot;headerlink&quot; title=&quot;2. Hybrid App&quot;&gt;&lt;/a&gt;2. Hybrid App&lt;/h3&gt;&lt;p&gt;Hybrid APP指的是半原生半Web的混合类App。需要下载安装，看上去类似Native App，但只有很少的UI Web View，访问的内容是 Web 。&lt;/p&gt;
&lt;p&gt;例如Store里的新闻类APP，视频类APP普遍采取的是Native的框架，Web的内容。&lt;/p&gt;
&lt;p&gt;Hybrid App 极力去打造类似于Native App 的体验，但仍受限于技术，网速，等等很多因素。尚不完美。   &lt;/p&gt;
&lt;h3 id=&quot;3-Native-App&quot;&gt;&lt;a href=&quot;#3-Native-App&quot; class=&quot;headerlink&quot; title=&quot;3. Native App&quot;&gt;&lt;/a&gt;3. Native App&lt;/h3&gt;&lt;p&gt;Native APP 指的是原生程序，一般依托于操作系统，有很强的交互，是一个完整的App，可拓展性强。需要用户下载安装使用。   &lt;/p&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;p&gt;（1）打造完美的用户体验&lt;/p&gt;
&lt;p&gt;（2）性能稳定&lt;/p&gt;
&lt;p&gt;（3）操作速度快，上手流畅&lt;/p&gt;
&lt;p&gt;（4）访问本地资源（通讯录，相册）&lt;/p&gt;
&lt;p&gt;（5）设计出色的动效，转场，&lt;/p&gt;
&lt;p&gt;（6）拥有系统级别的贴心通知或提醒&lt;/p&gt;
&lt;p&gt;（7）用户留存率高&lt;/p&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;p&gt;（1）分发成本高（不同平台有不同的开发语言和界面适配）&lt;/p&gt;
&lt;p&gt;（2）维护成本高（例如一款App已更新至V5版本，但仍有用户在使用V2， V3， V4版本，需要更多的开发人员维护之前的版本）&lt;/p&gt;
&lt;p&gt;（3）更新缓慢，根据不同平台，提交–审核–上线 等等不同的流程，需要经过的流程较复杂   &lt;/p&gt;
&lt;h2 id=&quot;二、Web-App、Hybrid-App、Native-App-技术特性&quot;&gt;&lt;a href=&quot;#二、Web-App、Hybrid-App、Native-App-技术特性&quot; class=&quot;headerlink&quot; title=&quot;二、Web App、Hybrid App、Native App 技术特性&quot;&gt;&lt;/a&gt;二、Web App、Hybrid App、Native App 技术特性&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;../../../../css/images/app-0810/2.png&quot; alt=&quot;Web App、Hybrid App、Native App 技术特性&quot;&gt;    &lt;/p&gt;
&lt;p&gt;由上图可见，Web APP 的开发基于Html5语言。而Html5语言本身又有着不可避免的局限性。正是这些局限性的存在，使得Web App在体验中要逊于Native App。   &lt;/p&gt;
&lt;h2 id=&quot;三、Web-App受限制因素及设计要点&quot;&gt;&lt;a href=&quot;#三、Web-App受限制因素及设计要点&quot; class=&quot;headerlink&quot; title=&quot;三、Web App受限制因素及设计要点&quot;&gt;&lt;/a&gt;三、Web App受限制因素及设计要点&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;../../../../css/images/app-0810/3.png&quot; alt=&quot;Web App受限制因素及设计要点&quot;&gt;  &lt;/p&gt;
&lt;p&gt;相比Native App，Web App体验中受限于以上5个因素：网络环境，渲染性能，平台特性，受限于浏览器，系统限制。   &lt;/p&gt;
&lt;h3 id=&quot;1-网络环境，渲染性能&quot;&gt;&lt;a href=&quot;#1-网络环境，渲染性能&quot; class=&quot;headerlink&quot; title=&quot;1. 网络环境，渲染性能&quot;&gt;&lt;/a&gt;1. 网络环境，渲染性能&lt;/h3&gt;&lt;p&gt;Web APP对网络环境的依赖性较大，因为Web APP中的H5页面，当用户使用时，去服务器请求显示页面。如果此时用户恰巧遇到网速慢，网络不稳定等其他环境时，用户请求页面的效率大打折扣，在用户使 用中会出现不流畅，断断续续的不良感受。同时，H5技术自身渲染性能较弱：对复杂的图形样式，多样的动效，自定义字体等的支持性不强。&lt;/p&gt;
&lt;p&gt;因此，基于网络环境和渲染性能的影响，在设计H5页面时，应注意以下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简化不重要的动画/动效&lt;ul&gt;
&lt;li&gt;简化复杂的图形文字样式&lt;/li&gt;
&lt;li&gt;减少页面渲染的频率和次数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从下图移动Web版 jing.fm和Native版jing对比后可以看出：Web APP首页去除冗余的功能，回溯本源，只给用户提供了jing.fm最初的本质需求——电台。既符合H5精简功能又达到了突出核心功能的设计原则。无疑给用户眼前一亮的气息。&lt;/p&gt;
&lt;p&gt;正如书中《瞬间之美》的一个核心观点：重要的并不是我们提供的信息量有多大，而是我们能否给他们提供真正需要的信息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../../../../css/images/app-0810/4.png&quot; alt=&quot;Web版 Jing.fm&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../../../../css/images/app-0810/5.png&quot; alt=&quot;Native版 Jing.fm&quot;&gt;  &lt;/p&gt;
&lt;p&gt;再如：百度最新推出的直达号，以良子健身为例：&lt;/p&gt;
&lt;p&gt;从Native App和Web App（百度直达号）的对比中，我们可以看出Native良子以九宫格的形式展现，且属于双重导航，功能入口太多；弊端是用户不知道聚焦在哪里，分散用户 的注意力。而Web版良子整合并减少了导航的入口，增强用户的专注度；界面清爽，整洁，很好地传达了良子本身的寓意——轻松、愉悦、休闲、舒适。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../../../../css/images/app-0810/6.png&quot; alt=&quot;良子健身&quot;&gt; &lt;/p&gt;
&lt;h3 id=&quot;2-受限于浏览器&quot;&gt;&lt;a href=&quot;#2-受限于浏览器&quot; class=&quot;headerlink&quot; title=&quot;2. 受限于浏览器&quot;&gt;&lt;/a&gt;2. 受限于浏览器&lt;/h3&gt;&lt;p&gt;通常Web App生存于浏览器里，宿主是浏览器。不同的浏览器自身的属性不尽相同，如：浏览器自带的手势，页面切换方式，链接跳转方式，版本兼容问题等等。&lt;/p&gt;
&lt;p&gt;例如下图：UC 浏览器和百度浏览器自身支持手势切换页面。手指从左侧滑动页面，返回至上一级。百度手机助手H5页面，顶部Banner支持手势左右滑动切换。这一操作与浏览器自身手势是冲突的。  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../../../../css/images/app-0810/7.png&quot; alt=&quot;浏览器对比图&quot;&gt; &lt;/p&gt;
&lt;p&gt;再如，基于浏览器的Web APP在打开新的模块中的页面时，大多会新开窗口来展现。例如用户在使用购物类APP时，浏览每日精选模块时，每当打开新的商品时，默认新开一个窗口。这 样的优劣势显而易见：优势是能够记录用户浏览过的痕迹，浏览过的商品，以便后续横向对比；劣势是过多的页面容易使用户迷失在页面中。&lt;/p&gt;
&lt;p&gt;正如Google开发手册里描述：当用户打开一个Web App的时候，他们期待这个应用就像是一个单个应用，而不是一系列网页的结合。然而，什么情况下需要跳转页面，什么情况下在当前页面展示则需要设计师细致考量。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../../../../css/images/app-0810/8.png&quot; alt=&quot;淘宝Web版&quot;&gt; &lt;/p&gt;
&lt;p&gt;因此，Web App基于浏览器的特性，从设计角度应该遵循以下了两点：&lt;/p&gt;
&lt;p&gt;少用手势，避免与浏览器手势冲突。&lt;/p&gt;
&lt;p&gt;减少页面跳转次数，尽量在当前页面显示。   &lt;/p&gt;
&lt;h3 id=&quot;3-系统限制，平台特性&quot;&gt;&lt;a href=&quot;#3-系统限制，平台特性&quot; class=&quot;headerlink&quot; title=&quot;3. 系统限制，平台特性&quot;&gt;&lt;/a&gt;3. 系统限制，平台特性&lt;/h3&gt;&lt;p&gt;由于Html5语言的技术特性，无法调用系统级别的权限。例如，系统级别的弹窗，系统级别的通知，地理信息，通讯录，语音等等。且与系统的兼容性也会存在一些问题。以上限制通常导致APP的拓展性不强，体验相对较差。例如百度地图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../../../../css/images/app-0810/9.png&quot; alt=&quot;百度地图web和Native对比图&quot;&gt; &lt;/p&gt;
&lt;p&gt;Web版地图基于浏览器展现，因此，不能全屏显示地图，给用户的眼界带来局限感；相反，Native 版地图以全屏展现的形式，很好的拓展了用户的视野。整个界面干净简洁，首页去除冗余功能。&lt;/p&gt;
&lt;p&gt;在制定路线的体验中，如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../../../../css/images/app-0810/10.png&quot; alt=&quot;百度地图制定路线图web和Native对比&quot;&gt; &lt;/p&gt;
&lt;p&gt;Web 版地图耗费的流量大于Native版，且不能预先缓存离线地图。对于地理位置的判断也是基于宿主浏览器，而非Web地图本身。获取路线后，对于更换到达方式，相对来说是不便利的。&lt;/p&gt;
&lt;p&gt;相反，Native 版地图，能够直接访问用户的地理位置，能够很清晰的为用户展现App规划的路线，并能轻松的查看多种路线方案，以便做出符合自己的最佳方案。对于切换公交，走路，自驾等路线方式也是只需一键操作。&lt;/p&gt;
&lt;p&gt;Native 版地图相对于 Web版地图增加更多情感化，易用的功能，如：能够记录用户的生活轨迹，记录用户的点滴足迹，能够享受躲避拥堵方案等。而Web版地图基于技术框架，很难实现以上功能，从用户体验角度来看，弱于Native版地图。   &lt;/p&gt;
&lt;h2 id=&quot;四、小结&quot;&gt;&lt;a href=&quot;#四、小结&quot; class=&quot;headerlink&quot; title=&quot;四、小结&quot;&gt;&lt;/a&gt;四、小结&lt;/h2&gt;&lt;p&gt;综述所述，在设计Web APP时，应当遵循以下几点：&lt;/p&gt;
&lt;h3 id=&quot;1-简化&quot;&gt;&lt;a href=&quot;#1-简化&quot; class=&quot;headerlink&quot; title=&quot;1. 简化&quot;&gt;&lt;/a&gt;1. 简化&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;简化不重要的动画/动效&lt;/li&gt;
&lt;li&gt;简化复杂的图形文字样式&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-少用&quot;&gt;&lt;a href=&quot;#2-少用&quot; class=&quot;headerlink&quot; title=&quot;2. 少用&quot;&gt;&lt;/a&gt;2. 少用&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;少用手势，避免与浏览器手势冲突&lt;/li&gt;
&lt;li&gt;少用弹窗&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-减少&quot;&gt;&lt;a href=&quot;#3-减少&quot; class=&quot;headerlink&quot; title=&quot;3. 减少&quot;&gt;&lt;/a&gt;3. 减少&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;减少页面内容&lt;/li&gt;
&lt;li&gt;减少控件数量&lt;/li&gt;
&lt;li&gt;减少页面跳转次数，尽量在当前页面显示&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;4-增强&quot;&gt;&lt;a href=&quot;#4-增强&quot; class=&quot;headerlink&quot; title=&quot;4. 增强&quot;&gt;&lt;/a&gt;4. 增强&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;增强Loading时的趣味性&lt;/li&gt;
&lt;li&gt;增强页面主次关系&lt;/li&gt;
&lt;li&gt;增强控件复用性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原文地址：&lt;a href=&quot;http://mux.baidu.com/?p=6750&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mux.baidu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;作者：guowenwe&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt; 目前主流应用程序大体分为三类：Web App、Hybrid App、 Native App。
    
    </summary>
    
      <category term="产品设计" scheme="http://icamille.github.io/categories/%E4%BA%A7%E5%93%81%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="移动app" scheme="http://icamille.github.io/tags/%E7%A7%BB%E5%8A%A8app/"/>
    
  </entry>
  
  <entry>
    <title>前端书籍目录</title>
    <link href="http://icamille.github.io/2016/08/09/book-list-for-fed/"/>
    <id>http://icamille.github.io/2016/08/09/book-list-for-fed/</id>
    <published>2016-08-09T02:15:38.000Z</published>
    <updated>2016-08-09T02:15:00.000Z</updated>
    
    <content type="html">&lt;p&gt; &lt;a href=&quot;http://es6.ruanyifeng.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《ECMAScript 6入门》&lt;/a&gt;&lt;br&gt;《用angularjs开发下一代web应用》  &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;《bootstrap用户手册》&lt;br&gt;《jquery权威指南》  &lt;/p&gt;
&lt;p&gt;《JavaScript高级程序设计》&lt;/p&gt;
&lt;p&gt;《javascript语言精粹》&lt;br&gt;《JavaScript权威指南（第6版）》&lt;br&gt;《高性能javascript》&lt;br&gt;《JavaScript学习指南》&lt;br&gt;《javascript经典实例》&lt;br&gt;《编写可维护的javascript》&lt;br&gt;《基于mvc的javascript web富应用开发》&lt;br&gt;《javascript模式》&lt;br&gt;《深入HTML5应用开发》&lt;br&gt;《jquery ui开发指南》&lt;br&gt;《css权威指南》&lt;br&gt;《html 5应用开发实践指南》&lt;br&gt;《html 5与css 3权威指南》&lt;/p&gt;
&lt;p&gt;《head first html与css(第2版)》&lt;/p&gt;
&lt;p&gt;《JavaScript框架设计》&lt;br&gt;《JavaScript专家编程》&lt;br&gt;《JavaScript Ninjia》&lt;br&gt;《JavaScript语言精粹（修订版）》&lt;br&gt;《JavaScript设计模式》&lt;br&gt;《JavaScript面向对象编程指南（第2版）》&lt;br&gt;《JavaScript函数式编程》&lt;br&gt;《JavaScript高效图形编程》  &lt;/p&gt;
&lt;p&gt;《编写可测试的JavaScript代码》&lt;br&gt;《编写可维护的JavaScript》&lt;br&gt;《你不知道的JavaScript（上卷）》英文原版猛戳：&lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;英文原版  &lt;/a&gt;&lt;br&gt;《第三方JavaScript编程》&lt;br&gt;《单页Web应用》  &lt;/p&gt;
&lt;p&gt;《HTML5和JavaScript网页设计基础》&lt;br&gt;《HTML5+JavaScript动画基础》&lt;br&gt;《HTML5和JavaScript Web应用开发》&lt;br&gt;《html5移动web开发指南》&lt;/p&gt;
&lt;p&gt;《图解CSS3》&lt;br&gt;《bootstrap实战》  &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt; &lt;a href=&quot;http://es6.ruanyifeng.com/&quot;&gt;《ECMAScript 6入门》&lt;/a&gt;&lt;br&gt;《用angularjs开发下一代web应用》
    
    </summary>
    
      <category term="技术" scheme="http://icamille.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端书籍" scheme="http://icamille.github.io/tags/%E5%89%8D%E7%AB%AF%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>MVC，MVP 和 MVVM 的图示</title>
    <link href="http://icamille.github.io/2016/08/01/mvcmvp-mvvm/"/>
    <id>http://icamille.github.io/2016/08/01/mvcmvp-mvvm/</id>
    <published>2016-08-01T13:02:38.000Z</published>
    <updated>2016-08-05T07:20:58.000Z</updated>
    
    <content type="html">&lt;p&gt;复杂的软件必须有清晰合理的架构，否则无法开发和维护。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/MVC&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MVC&lt;/a&gt;（Model-View-Controller）是最常见的软件架构之一，业界有着广泛应用。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;它本身很容易理解，但是要讲清楚，它与衍生的 MVP 和 MVVM 架构的区别就不容易了。&lt;/p&gt;
&lt;p&gt;昨天晚上，我读了&lt;a href=&quot;https://blog.nodejitsu.com/scaling-isomorphic-javascript-code/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Scaling Isomorphic Javascript Code》&lt;/a&gt;，突然意识到，它们的区别非常简单。我用几段话，就可以说清。   &lt;/p&gt;
&lt;h2 id=&quot;一、MVC&quot;&gt;&lt;a href=&quot;#一、MVC&quot; class=&quot;headerlink&quot; title=&quot;一、MVC&quot;&gt;&lt;/a&gt;一、MVC&lt;/h2&gt;&lt;p&gt;MVC模式的意思是，软件可以分成三个部分。   &lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;../../../../css/images/mvvn-160805-01.png&quot; alt=&quot;MVC&quot;&gt;  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;视图（View）：用户界面。
控制器（Controller）：业务逻辑
模型（Model）：数据保存
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;各部分之间的通信方式如下。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;../../../../css/images/mvvn-160805-02.png&quot; alt=&quot;MVC&quot;&gt;   &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;View 传送指令到 Controller
Controller 完成业务逻辑后，要求 Model 改变状态
Model 将新的数据发送到 View，用户得到反馈
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;所有通信都是单向的。    &lt;/p&gt;
&lt;h2 id=&quot;二、互动模式&quot;&gt;&lt;a href=&quot;#二、互动模式&quot; class=&quot;headerlink&quot; title=&quot;二、互动模式&quot;&gt;&lt;/a&gt;二、互动模式&lt;/h2&gt;&lt;p&gt;接受用户指令时，MVC 可以分成两种方式。一种是通过 View 接受指令，传递给 Controller。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;../../../../css/images/mvvn-160805-03.png&quot; alt=&quot;MVC&quot;&gt;   &lt;/p&gt;
&lt;p&gt;另一种是直接通过controller接受指令。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;../../../../css/images/mvvn-160805-04.png&quot; alt=&quot;MVC&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;三、实例：Backbone&quot;&gt;&lt;a href=&quot;#三、实例：Backbone&quot; class=&quot;headerlink&quot; title=&quot;三、实例：Backbone&quot;&gt;&lt;/a&gt;三、实例：Backbone&lt;/h2&gt;&lt;p&gt;实际项目往往采用更灵活的方式，以 Backbone.js 为例。  &lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;../../../../css/images/mvvn-160805-05.png&quot; alt=&quot;MVP&quot;&gt;  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;用户可以向 View 发送指令（DOM 事件），再由 View 直接要求 Model 改变状态。   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用户也可以直接向 Controller 发送指令（改变 URL 触发 hashChange 事件），再由 Controller 发送给 View。   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Controller 非常薄，只起到路由的作用，而 View 非常厚，业务逻辑都部署在 View。所以，Backbone 索性取消了 Controller，只保留一个 Router（路由器） 。   &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;四、MVP&quot;&gt;&lt;a href=&quot;#四、MVP&quot; class=&quot;headerlink&quot; title=&quot;四、MVP&quot;&gt;&lt;/a&gt;四、MVP&lt;/h2&gt;&lt;p&gt;MVP 模式将 Controller 改名为 Presenter，同时改变了通信方向。   &lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;../../../../css/images/mvvn-160805-06.png&quot; alt=&quot;MVP&quot;&gt; &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;各部分之间的通信，都是双向的。   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;View 与 Model 不发生联系，都通过 Presenter 传递。   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;View 非常薄，不部署任何业务逻辑，称为”被动视图”（Passive View），即没有任何主动性，而 Presenter非常厚，所有逻辑都部署在那里。   &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;五、MVVM&quot;&gt;&lt;a href=&quot;#五、MVVM&quot; class=&quot;headerlink&quot; title=&quot;五、MVVM&quot;&gt;&lt;/a&gt;五、MVVM&lt;/h2&gt;&lt;p&gt;MVVM 模式将 Presenter 改名为 ViewModel，基本上与 MVP 模式完全一致。&lt;br&gt; &lt;img src=&quot;../../../../css/images/mvvn-160805-07.png&quot; alt=&quot;MVVM&quot;&gt;    &lt;/p&gt;
&lt;p&gt;唯一的区别是，它采用双向绑定（data-binding）：View的变动，自动反映在 ViewModel，反之亦然。&lt;a href=&quot;https://angularjs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Angular&lt;/a&gt; 和 &lt;a href=&quot;http://emberjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ember&lt;/a&gt; 都采用这种模式。   &lt;/p&gt;
&lt;p&gt;内容转自：&lt;a href=&quot;http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;复杂的软件必须有清晰合理的架构，否则无法开发和维护。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/MVC&quot;&gt;MVC&lt;/a&gt;（Model-View-Controller）是最常见的软件架构之一，业界有着广泛应用。
    
    </summary>
    
      <category term="技术" scheme="http://icamille.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="软件架构" scheme="http://icamille.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>《如何阅读一本书》阅读笔记</title>
    <link href="http://icamille.github.io/2016/07/29/readbook/"/>
    <id>http://icamille.github.io/2016/07/29/readbook/</id>
    <published>2016-07-29T14:29:38.000Z</published>
    <updated>2016-07-29T14:35:06.000Z</updated>
    
    <content type="html">&lt;p&gt;最近参与熊猫书院《十个月提升自己》第三期的读书活动，每周阅读一本图书。7月开始，今天是第四周的最后一天，第四本书也已阅读完成。本文主要是想通过思维导图的方式和大家分享[美] 莫提默·J. 艾德勒 / 查尔斯·范多伦 的《如何阅读一本书》一书。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下面分享给大家：&lt;br&gt; &lt;img src=&quot;../../../../css/images/howtoreadbook-2016160729.png&quot; alt=&quot;《如何阅读一本书》阅读笔记 -- 思维导图&quot;&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;../../../../css/images/howtoreadabook.png&quot; alt=&quot;《如何阅读一本书》阅读笔记 -- 思维导图&quot;&gt;&lt;/p&gt;
&lt;p&gt;每天成长一点，遇见更好的自己！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近参与熊猫书院《十个月提升自己》第三期的读书活动，每周阅读一本图书。7月开始，今天是第四周的最后一天，第四本书也已阅读完成。本文主要是想通过思维导图的方式和大家分享[美] 莫提默·J. 艾德勒 / 查尔斯·范多伦 的《如何阅读一本书》一书。
    
    </summary>
    
      <category term="读书笔记" scheme="http://icamille.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="如何阅读一本书" scheme="http://icamille.github.io/tags/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>toFixed引发的思考</title>
    <link href="http://icamille.github.io/2016/07/27/about-tofixed/"/>
    <id>http://icamille.github.io/2016/07/27/about-tofixed/</id>
    <published>2016-07-26T23:02:38.000Z</published>
    <updated>2016-07-27T16:12:36.000Z</updated>
    
    <content type="html">&lt;p&gt;在对文件上传进度进行格式化处理时，涉及到精度的四舍五入问题，例如保留两位小数。这在JS中可以通过调用toFixed传入精度实现。但问题来了，先乘100再舍入，还是先舍入再乘100？&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;先看结果：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var a = Math.random();  
console.log(a);  
console.log(a.toFixed(4));  
console.log(a.toFixed(4) * 100);  
console.log((a * 100).toFixed(2));
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;输出1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0.8988301526666329  
0.8988  
89.88000000000001
89.88
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;输出2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0.413465264585297  
0.4135  
41.349999999999994  
41.35
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;输出3：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0.1348901139915517
0.1349
13.489999999999998
13.49
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;输出4：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0.2731272622047103  
0.2731  
27.310000000000002  
27.31  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  可以看出，两种调用顺序的执行结果并不一致，前者甚至没有达到预期的保留2位小数。该如何解释并解决呢？ &lt;/p&gt;
&lt;p&gt;  回到JS对浮点数的处理，JS仅有Number数值类型，而Number采用的是IEEE-754 64位双精度浮点数编码。其具有以下特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;浮点数可表示的值范围比同等位数的整数表示方式的值范围要大得多；&lt;/li&gt;
&lt;li&gt;浮点数无法精确表示其值范围内的所有数值，而有符号和无符号整数则是精确表示其值范围内的每个数值；&lt;/li&gt;
&lt;li&gt;浮点数只能精确表示m*2e的数值；&lt;/li&gt;
&lt;li&gt;当biased-exponent为2e-1-1时，浮点数能精确表示该范围内的各整数值；&lt;/li&gt;
&lt;li&gt;当biased-exponent不为2e-1-1时，浮点数不能精确表示该范围内的各整数值。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由此可知，部分数值并不能精确表示，最终在运算结果中导致了偏差。&lt;/p&gt;
&lt;p&gt;对以上问题的分析，详见：&lt;a href=&quot;https://segmentfault.com/a/1190000005022170&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Why 0.1 + 0.2 === 0.30000000000000004?&lt;/a&gt;。其中也给出了几个解决的方案，可以作为问题的补充。&lt;/p&gt;
&lt;p&gt;而对于本问题的解决，将toFixed调用放至最后即可。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;调用顺序很重要！&lt;/li&gt;
&lt;li&gt;异常测试很重要，尤其对于条件特殊值的非边界情况（如特定的随机数）。     &lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;本文（当然）是从&lt;a href=&quot;http://www.ifuyun.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;抚云生活&lt;/a&gt;偷来的，你们可以去告状了： &lt;/strong&gt;&lt;br&gt; &lt;img src=&quot;../../../../css/images/to-fixed.jpg&quot; alt=&quot;I,Fuyun&quot;&gt;  &lt;/p&gt;
&lt;p&gt; 网址：&lt;a href=&quot;http://www.ifuyun.com/post/20ce98be3cbcd989&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;toFixed引发的思考&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在对文件上传进度进行格式化处理时，涉及到精度的四舍五入问题，例如保留两位小数。这在JS中可以通过调用toFixed传入精度实现。但问题来了，先乘100再舍入，还是先舍入再乘100？
    
    </summary>
    
      <category term="技术" scheme="http://icamille.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="JavaScript" scheme="http://icamille.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>《精进》阅读笔记</title>
    <link href="http://icamille.github.io/2016/07/22/jingjin/"/>
    <id>http://icamille.github.io/2016/07/22/jingjin/</id>
    <published>2016-07-22T04:22:38.000Z</published>
    <updated>2016-07-22T03:22:06.000Z</updated>
    
    <content type="html">&lt;p&gt;最近参与熊猫书院《十个月提升自己》第三期的读书活动，每周阅读一本图书。7月开始，今天恰好是第三周的最后一天，第三本书已阅读完成。本文主要是想通过思维导图的方式和大家分享知乎大神采铜的《精进：如何成为一个很厉害的人》一书。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下面分享给大家：&lt;br&gt; &lt;img src=&quot;../../../../css/images/jingjin-2016160722.jpg&quot; alt=&quot;《精进》阅读笔记 -- 思维导图&quot;&gt;&lt;/p&gt;
&lt;p&gt;每天成长一点，遇见更好的自己！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近参与熊猫书院《十个月提升自己》第三期的读书活动，每周阅读一本图书。7月开始，今天恰好是第三周的最后一天，第三本书已阅读完成。本文主要是想通过思维导图的方式和大家分享知乎大神采铜的《精进：如何成为一个很厉害的人》一书。
    
    </summary>
    
      <category term="读书笔记" scheme="http://icamille.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="提升自我" scheme="http://icamille.github.io/tags/%E6%8F%90%E5%8D%87%E8%87%AA%E6%88%91/"/>
    
  </entry>
  
  <entry>
    <title>《拖延心理学》阅读笔记</title>
    <link href="http://icamille.github.io/2016/07/15/tyxlx/"/>
    <id>http://icamille.github.io/2016/07/15/tyxlx/</id>
    <published>2016-07-15T02:02:38.000Z</published>
    <updated>2016-07-18T23:07:54.000Z</updated>
    
    <content type="html">&lt;p&gt;最近参与熊猫书院《十个月提升自己》第三期的读书活动，每周阅读一本图书。7月开始，今天恰好是第二周的最后一天，第二本书已阅读完成。本文主要是想通过思维导图的方式和大家分享简·博克、莱诺拉·袁的《拖延心理学》一书。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下面分享给大家：&lt;br&gt; &lt;img src=&quot;../../../../css/images/tyxlx-2016160715.jpg&quot; alt=&quot;《拖延心理学》阅读笔记 -- 思维导图&quot;&gt;&lt;/p&gt;
&lt;p&gt;每天成长一点，遇见更好的自己！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近参与熊猫书院《十个月提升自己》第三期的读书活动，每周阅读一本图书。7月开始，今天恰好是第二周的最后一天，第二本书已阅读完成。本文主要是想通过思维导图的方式和大家分享简·博克、莱诺拉·袁的《拖延心理学》一书。
    
    </summary>
    
      <category term="读书笔记" scheme="http://icamille.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="拖延心理学" scheme="http://icamille.github.io/tags/%E6%8B%96%E5%BB%B6%E5%BF%83%E7%90%86%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>《自控力》阅读笔记</title>
    <link href="http://icamille.github.io/2016/07/08/zikongli/"/>
    <id>http://icamille.github.io/2016/07/08/zikongli/</id>
    <published>2016-07-08T02:02:38.000Z</published>
    <updated>2016-07-10T13:56:00.000Z</updated>
    
    <content type="html">&lt;p&gt;最近参与熊猫书院《十个月提升自己》第三期的读书活动，每周阅读一本图书。7月开始，今天恰好是第一周的最后一天，第一本书也已阅读完成。本文主要是想通过思维导图的方式和大家分享美国著名健康心理学家凯利·麦格尼格尔博士的《自控力》一书。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下面分享给大家：&lt;br&gt; &lt;img src=&quot;../../../../css/images/zikongli-2016160708.jpg&quot; alt=&quot;《自控力》阅读笔记 -- 思维导图&quot;&gt;&lt;/p&gt;
&lt;p&gt;每天成长一点，遇见更好的自己！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近参与熊猫书院《十个月提升自己》第三期的读书活动，每周阅读一本图书。7月开始，今天恰好是第一周的最后一天，第一本书也已阅读完成。本文主要是想通过思维导图的方式和大家分享美国著名健康心理学家凯利·麦格尼格尔博士的《自控力》一书。
    
    </summary>
    
      <category term="读书笔记" scheme="http://icamille.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="自控力" scheme="http://icamille.github.io/tags/%E8%87%AA%E6%8E%A7%E5%8A%9B/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 学习资源</title>
    <link href="http://icamille.github.io/2016/07/01/markdown-url/"/>
    <id>http://icamille.github.io/2016/07/01/markdown-url/</id>
    <published>2016-07-01T03:07:38.000Z</published>
    <updated>2016-07-10T13:56:00.000Z</updated>
    
    <content type="html">&lt;p&gt;在搭建&lt;a href=&quot;http://icamille.github.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;个人网站&lt;/a&gt;过程中，第一次接触到&lt;a href=&quot;http://baike.baidu.com/link?url=DnJkoGHc2tc3-TaQAthv-zFbrYi9YkL9pw1313M2z7-Ro7Mhx9gO6rjnZAzrF9LdXP0kcAMI0CtmYwYUZq0SDa&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Markdowm&lt;/a&gt;，需要学习Markdown的相关语法，下面是一些学习资源的相关链接。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt; &lt;/p&gt;
&lt;h2 id=&quot;Markdown学习资源&quot;&gt;&lt;a href=&quot;#Markdown学习资源&quot; class=&quot;headerlink&quot; title=&quot;Markdown学习资源&quot;&gt;&lt;/a&gt;Markdown学习资源&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/1e402922ee32/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Markdown——入门指南&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://sspai.com/25137&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;认识与入门Markdown&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.ituring.com.cn/article/23&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;怎样使用Markdown&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://wowubuntu.com/markdown/#list&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Markdown 语法说明 (简体中文版) &lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有时间会写篇博客来详细总结下Markdown的相关内容。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在搭建&lt;a href=&quot;http://icamille.github.com&quot;&gt;个人网站&lt;/a&gt;过程中，第一次接触到&lt;a href=&quot;http://baike.baidu.com/link?url=DnJkoGHc2tc3-TaQAthv-zFbrYi9YkL9pw1313M2z7-Ro7Mhx9gO6rjnZAzrF9LdXP0kcAMI0CtmYwYUZq0SDa&quot;&gt;Markdowm&lt;/a&gt;，需要学习Markdown的相关语法，下面是一些学习资源的相关链接。
    
    </summary>
    
      <category term="技术" scheme="http://icamille.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Markdown" scheme="http://icamille.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Web前端设计原则</title>
    <link href="http://icamille.github.io/2016/07/01/design-principles-of-web-front/"/>
    <id>http://icamille.github.io/2016/07/01/design-principles-of-web-front/</id>
    <published>2016-07-01T02:02:38.000Z</published>
    <updated>2016-08-05T07:20:30.000Z</updated>
    
    <content type="html">&lt;p&gt;最近看了@余果 的《Web全栈工程师的自我修养》颇有一些收获，刚好最近在制定经验前端的规范化工作，制定了几条前端设计原则，分享给大家。&lt;/p&gt;
&lt;p&gt;下面就是经验的前端指导原则：&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设计原则是指导性原则，比较抽象，可扩展&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;KISS原则&lt;/li&gt;
&lt;li&gt;DRY原则   &lt;/li&gt;
&lt;li&gt;最少知道原则 &lt;/li&gt;
&lt;li&gt;分治原则&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;KISS原则（Keep-it-Simple-and-Stupid）&quot;&gt;&lt;a href=&quot;#KISS原则（Keep-it-Simple-and-Stupid）&quot; class=&quot;headerlink&quot; title=&quot;KISS原则（Keep it Simple and Stupid）&quot;&gt;&lt;/a&gt;KISS原则（Keep it Simple and Stupid）&lt;/h2&gt;&lt;p&gt;一切尽可能简单！ 简单就是美，能简单的绝不复杂。&lt;/p&gt;
&lt;h2 id=&quot;DRY原则（Don’t-Repeat-Yourself）&quot;&gt;&lt;a href=&quot;#DRY原则（Don’t-Repeat-Yourself）&quot; class=&quot;headerlink&quot; title=&quot;DRY原则（Don’t Repeat Yourself）&quot;&gt;&lt;/a&gt;DRY原则（Don’t Repeat Yourself）&lt;/h2&gt;&lt;p&gt;顾名思义，任何一段代码如果需要复制第三次，需要进行抽象。&lt;/p&gt;
&lt;h2 id=&quot;最少知道原则。&quot;&gt;&lt;a href=&quot;#最少知道原则。&quot; class=&quot;headerlink&quot; title=&quot;最少知道原则。&quot;&gt;&lt;/a&gt;最少知道原则。&lt;/h2&gt;&lt;p&gt;高内聚，低耦合，任何事物应该保持对外界的最少知道原则。&lt;/p&gt;
&lt;h2 id=&quot;分治原则&quot;&gt;&lt;a href=&quot;#分治原则&quot; class=&quot;headerlink&quot; title=&quot;分治原则&quot;&gt;&lt;/a&gt;分治原则&lt;/h2&gt;&lt;p&gt;复杂的问题，负责的功能，应该拆分，由更小的部分组成。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;原文网址：&lt;a href=&quot;http://yanhaijing.com/web/2016/06/17/design-principles-of-web-front/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://yanhaijing.com/web/2016/06/17/design-principles-of-web-front/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近看了@余果 的《Web全栈工程师的自我修养》颇有一些收获，刚好最近在制定经验前端的规范化工作，制定了几条前端设计原则，分享给大家。&lt;/p&gt;
&lt;p&gt;下面就是经验的前端指导原则：
    
    </summary>
    
      <category term="技术" scheme="http://icamille.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="设计原则" scheme="http://icamille.github.io/tags/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://icamille.github.io/2016/06/23/hello-world/"/>
    <id>http://icamille.github.io/2016/06/23/hello-world/</id>
    <published>2016-06-23T02:02:38.000Z</published>
    <updated>2016-07-10T13:56:00.000Z</updated>
    
    <content type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://icamille.github.io/&quot;&gt;Camille Blog&lt;/a&gt;! This is my very first post.&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;h2 id=&quot;Hello-Everyone&quot;&gt;&lt;a href=&quot;#Hello-Everyone&quot; class=&quot;headerlink&quot; title=&quot;Hello Everyone&quot;&gt;&lt;/a&gt;Hello Everyone&lt;/h2&gt;&lt;p&gt;欢迎大家来到我的博客，以后会和大家分享工作和生活方面的收获。作为自己一步一步搭起来的博客的第一篇文章，谨以此文记录下自己的“劳动成果”。&lt;!--more--&gt;  嘿嘿……&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../../../../css/images/read.jpg&quot; alt=&quot;Camille Blog&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://icamille.github.io/&quot;&gt;Camille Blog&lt;/a&gt;! This is my very first post.
    
    </summary>
    
      <category term="博客" scheme="http://icamille.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="BLog" scheme="http://icamille.github.io/tags/BLog/"/>
    
  </entry>
  
</feed>
